# basic info
CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)
PROJECT(scatter CXX)
SET(CMAKE_CXX_STANDARD 11)

# directories
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# rpath
SET(CMAKE_INSTALL_RPATH "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
IF(RPATH)
	SET(CMAKE_INSTALL_RPATH "${RPATH}:${CMAKE_INSTALL_RPATH}")
ENDIF(RPATH)
SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)

# openmp
FIND_PACKAGE(OpenMP)
IF(OpenMP_FOUND)
	MESSAGE(STATUS "OpenMp found")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
ELSE (OpenMP_FOUND)
	MESSAGE(STATUS "OpenMP not found")
ENDIF(OpenMP_FOUND)

# MPI
FIND_PACKAGE(MPI REQUIRED)
MESSAGE(STATUS "MPI found: ${MPI_COMPILER}")
INCLUDE_DIRECTORIES(${MPI_CXX_INCLUDE_PATH})

# Boost
FIND_PACKAGE(Boost 1.50.0 REQUIRED 
	COMPONENTS program_options filesystem system)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
SET(CMAKE_INSTALL_RPATH "${Boost_LIBRARY_DIRS}:${CMAKE_INSTALL_RPATH}")

# debug/release
IF(DEBUG)
	SET(CMAKE_BUILD_TYPE Debug)
	MESSAGE(STATUS "version: debug")
	ADD_DEFINITIONS(-D_DEBUG=${DEBUG})
ELSE(DEBUG)
	SET(CMAKE_BUILD_TYPE Release)
	MESSAGE(STATUS "version: release")
	ADD_DEFINITIONS(-D_RELEASE)
ENDIF(DEBUG)

# record native compiler info
SET(NATIVE_CXX_COMPILER ${CMAKE_CXX_COMPILER})
SET(NATIVE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
SET(CURRENT_COMPILER "NATIVE" CACHE STRING "Cureent using compiler " FORCE)


ADD_SUBDIRECTORY(rem)
ADD_SUBDIRECTORY(surfaces)
ADD_SUBDIRECTORY(grid)
ADD_SUBDIRECTORY(simulation)
ADD_SUBDIRECTORY(io)
ADD_SUBDIRECTORY(run)
